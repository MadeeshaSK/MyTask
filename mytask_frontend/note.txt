/*

# flutter is an open-source framwork developed by Google
# flutter is used to develop mobile applications
# flutter uses dart programming language
# flutter is a cross-platform framwork that means we can use the same code to develop android and ios applications
# flutter is a reactive framwork that means it is used to develop reactive applications
(reactive means the application will respond to the user's input)
# Dart is a programming language developed by Google for flutter
# Dart is a object-oriented programming language
# Dart is a client-optimized language for fast apps on any platform
# Supports Asynchronous programming
# Why we choose flutter? -> Single codebase, Hot reload, Rish Widget Library, Performance, Access to Native Features(feature for specific platform)

# Download flutter from https://flutter.dev/docs/get-started/install (flutter SDK(software development kit))
# Download Android Studio from https://developer.android.com/studio
# Download Visual Studio Code from https://code.visualstudio.com/download
# Download Dart and Flutter plugin in Visual Studio Code
# Download Android Virtual Device in Android Studio(Emulator)[this with included in Android Studio installation process]
# Download Android SDK in Android Studio
# Set path of flutter SDK in Environment Variables
# Run flutter doctor in terminal to check the installation of flutter
# Run flutter doctor --android-licenses in terminal to accept the licenses
# Download Flutter and Dart SDK, Bloc in Android Studio
# Install Git and set path in Environment Variables.

# Run flutter create mytask_frontend (no capital letters and spaces) in cmd to create a new flutter project in the MyTask folder
# Run code . in cmd to open the project in Visual Studio Code
# there will be android, ios, lib, test, web, gradle, .gitignore, .metadata, .packages, pubspec.lock, pubspec.yaml files in the project...
# pubspec.yaml file is the configuration file of the project.
# make folder structure in lib folder -> constants(colors(colors.dart),font,size), features(home(bloc,ui),todo(bloc,ui)), models(toDo.dart),
            repositories(homwrepository.dart, todorepository.dart), services(notificationservice.dart), widgets(textwidget.dart),main.dart
# Run flutter run in emulator to run the flutter project (go to main.dart select device bottom right and select device.devide for current state, device(cool boot) for from begin as lag)
# Run flutter run -d web-server in terminal to run the flutter project in web browser
# Run flutter run -d chrome in terminal to run the flutter project in chrome browser
# Click Start Debuging in top right
# Hot restart -> app will restart (round arrow icon in top middle)
# Hot reload -> just update after save (ctrl + s)

# Connect with GitHub repository
    open new terminal in vs code (cmd)
    git init -> initialize
    git add . (git add test1.txt[for one specific], [. for all]) -> stage the files
    git commit -m "set folders structures and initialize project" -> commit
    git branch -M main -> create branch as main
    git remote add origin https://github.com/MadeeshaSK/MyTask -> connect local project to git hub
    git push -u origin main -> push project 
    if request user name and password give github username and make access token as password in developer settings in github
# .gitignore file -> it include files which not to add github (.idea, env varibles, tokens(sensitive data))

# UI 
# splash screen -> when launching app it will apper and auto redirect 
# signup screen /login screen 
# home screen
# others
# widgets (everthing in flutter is a widgets) 
        structural widgets -> container, row, column, stack
        styling widgets -> padding, align, center
        layout widgets -> expanded. sizedbox, flexible
        functional widgets -> button, textfield, image
    collection of widget is a widget tree (UI)
# state -> something in widget that want to change(setstate)[change of a widget is a state]
# stateless widgets -> doesnt hold any state;UI remains static
# stateful widgets -> holds a mutable state; UI can change dynamically on user interaction

# Animations
# Resposnsive design
# Form design and validation
# import and defined in pubspec.yaml new resources
# google fonts flutter plugin is slow, so direct download and apply fonts
# make fonts folder and assets folder
# protect from safe area (the area in top bottom and two sides can have device options and UI)
# Remove Debug Banner top right on screen
 [add to main.dart in materialApp -> debugShowCheckedModeBanner:false,]
# we use expanded widget as when type in textfield it will not overlap with image(should resize)
# we wrapped column with a container as we have to style the column
# set texteditingcontroller to get input
# use const Text when static, the it will fast
# floatingLabelBehavior: FloatingLabelBehavior.never, -> when lick input field , the plaeholder(labal) will hide.
# go web search flutter lottie animation and then (lottie: ^3.3.1) - past thison pubspec.yaml file.(exit code 0 on cmd when installation done)
# download lottie json type file of a animation
# Spacer() -> begin and end of widgit then balance free space and center widget
# SizedBox -> set white space area.
# custom widgets and reusability
# adding dialogs, snackbars
# git branching, conventional commits
    // conventional commits
        /*
        <type>[optional scope]: <description>
        [optional body]
        [optional footer]

        type: feat, fix, docs, style, refactor, test, chore
        feat: new feature
        fix: bug fix
        docs: documentation
        style: formatting
        refactor: code change that neither fixes a bug or adds a feature
        test: adding tests
        chore: updating build tasks, package manager
        scope: module name
        description: short description of the change
        body: additional information
        footer: breaking changes, issues closed

        Example:
        feat[add]: add new feature
        fix[bug]: fix bug
        docs[readme]: update readme
        style[format]: format code
        refactor[function]: refactor function
        test[add]: add test

        real full exmaple:
        feat[add] : login feature
        [the admin can login to the system]

        */
# git branching

    //git branching

    when we create a new brach, it will be a copy of the current branch(not main branch always)
    a developer can create feat/auth branch from main branch and work on it and after make a pull request to main branch for merging
    in industry level we dont use direct main branch, we use develop branch and create feature branches from develop branch and after testing we merge feature branch to develop branch and after testing we merge develop branch to main branch
    if there is a bug in main branch, we create new branch and fix test it there and then merge it to main branch

# create and connect firebase database with flutter
# we use firebase to authentication and firebase database for this project
# first use as test mode database and set rule 
    allow read, write: if true
# install node js for flutter fire CLI method
    [npm install -g firebase-tools]
    [firebase --version]
    [firebase login] -> (for login firebase CLI) 
    [dart pub global activate flutterfire_cli]
    (set env.varibles) - if say 
    [flutterfire configure]
        it will display our firebase dbs, select one(go with arrow keys)
        then ask platforms (remove with space btn that dont need items)
    then we can see firebase_options.dart file, it has some errors,
    to solve these install firebase core plugin.
        search in web firebase core flutter, then copy code like(firebase_core 3.10.0)
        then past it pubspec.yaml file pluggin section.
    # / change main.dart as below

        Future<void> main() async {
        WidgetsFlutterBinding.ensureInitialized();
        await Firebase.initializeApp(options:defaultFirebaseOptions.currentPlatform);
        runApp(const MyApp());
        }
    then push github
        navigate to main directory ->
            cd--
            git add .
            git commit -m "config(firebase):firebase connected"
            git push -u origin main

# state management techniques 
    default - set states -> small project
    industry level - flutter BLoC pattern(Business Logic Component) -> good performance. scalability, structured
                -getx
                -provider
                -riverpod
# BLoC -> event -> UI to BLoC (trigger something)
          state -> BLoC to UI (change state)
          bloc  -> between UI layer and Database


# firebase authentication
    create a new branch feat/auth
    [cd ..]
    [git branch]
    [git branch feat/auth]
    [git checkout feat/auth]
    [git push -u origin feat/auth]

    [git fetch] -> fetch data github to local(but not merge, we can review and merge if need)
    [git merge origin/feat/auth] -> merge
    [git pull origin fetch/auth] -> auto fetch and merge

# To use init states(first run in UI) convert splashscreen as stateful widget 
# set initState and dispose functions(first thing and last thing what screen should do)
# ctrl + F for searching keyword in code.
# set Timer to splash screen
# set navigator to login
# wrap signup text from GestureDetector ( to detect click, double tap, long press ... )
# auth_services.dart + firebase_auth dependency (to use authentication with firebase)
# create user model class
# firebase firestore package as dependency
# on developer mode on windows(optional)
# add flutter bloc dependency
# go authenticaation on feature and right click then click new bloc and enter auth,
    then it will create auth_bloc.dart, auth_event.dart, auth_state.dart
# first create event,then event and bloc
#   bloc consumer -> do both listner and builder
    bloc builder -> 
    bloc listner -> 
# more complex parts ...
# exceptions
# gradle update android -> app -> build.gradle -> set  minSdk = 23, targetSdk = 34, multiDexEnabled =true, compileSdk = 34


# before merge every time see other branch is has not needed files
# if unfortunatly merge with .vscode file 
    [git rm -r --cached .vscode] then commit
    same as with main branch then commit and push and merge
    merge with cmd
    [git checkout main]


----------------------------------------------------------------------------------
# cons and props of flutter with compare react native

### **Flutter vs React Native**  

#### **Flutter**  
**Pros:**  
- Fast UI with customizable widgets  
- High performance (compiled to native code)  
- Single codebase for mobile, web, and desktop  
- Strong community and Google support  

**Cons:**  
- Larger app size  
- Learning curve (Dart language)  
- Limited third-party libraries compared to React Native  

#### **React Native**  
**Pros:**  
- Uses JavaScript (popular & widely used)  
- Large community and third-party libraries  
- Hot reloading for faster development  
- Cross-platform (iOS, Android, Web)  

**Cons:**  
- Performance issues (uses a bridge for communication)  
- Native modules needed for complex tasks  
- UI inconsistencies across platforms  

### **Example Use Cases**  
- **Flutter** → Banking apps, UI-heavy apps, Google Ads  
- **React Native** → Social media apps, e-commerce apps, Facebook & Instagram  

### **Other Technologies & Frameworks**  
- **Native Android** (Java/Kotlin)  
- **Native iOS** (Swift/Objective-C)  
- **Xamarin** (C# & .NET)  
- **SwiftUI** (for iOS apps)  
- **Kotlin Multiplatform** (Android, iOS, Web, Desktop)

When to Choose Flutter
✅ Large & Complex Projects – If you need high performance, custom UI, and long-term scalability, Flutter is better.
✅ Cross-Platform Beyond Mobile – If you're building for mobile, web, and desktop, Flutter provides a unified codebase.
✅ Smooth Animations & UI Customization – Ideal for finance, design-heavy, and enterprise apps.

Examples:

Banking & finance apps (e.g., Google Pay)
Enterprise & SaaS applications
High-performance & animation-heavy apps
When to Choose React Native
✅ Fast Development & Smaller Apps – If you want quick prototyping, MVPs, or simple apps, React Native works well.
✅ Web & Mobile Integration – If you have a React web app, React Native makes reuse easier.
✅ Third-Party Library Support – Easier access to JavaScript libraries & plugins.

Examples:

E-commerce & marketplace apps
Social media apps (e.g., Instagram, Facebook)
Small to medium-sized apps
Conclusion
Flutter is better for long-term, high-performance, and large-scale applications.
React Native is better for quick development, small to medium apps, and JavaScript-based teams.
*/